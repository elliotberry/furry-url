{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "src/fuzzyurl.js",
    "src/match.js",
    "src/protocols.js",
    "src/strings.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "/** @module fuzzyurl */\n\n'use strict';\n\nlet Strings = require(\"./strings\");\nlet Match = require(\"./match\");\nlet Protocols = require(\"./protocols\");\n\nconst defaultFuzzyurl = {\n  protocol: null,\n  username: null,\n  password: null,\n  hostname: null,\n  port: null,\n  path: null,\n  query: null,\n  fragment: null\n};\nconst fields = Object.keys(defaultFuzzyurl);\n\n/**\n * Creates a Fuzzyurl object with the given parameter values.  Valid\n * `params` keys are: `protocol`, `username`, `password`, `hostname`,\n * `port`, `path`, `query`, and `fragment`; all default to null.\n *\n * @param {object} params Parameter values.\n *\n */\nfunction Fuzzyurl(params) {\n  let ps = Object.assign({}, defaultFuzzyurl, params || {});\n  for (var p in ps) {\n    if (defaultFuzzyurl.hasOwnProperty(p)) this[p] = ps[p];\n    else throw new Error(`Bad Fuzzyurl parameter: ${p}`);\n  }\n};\nmodule.exports = Fuzzyurl;\n\nFuzzyurl.prototype.equals = function (fu) {\n  var equal = true;\n  fields.forEach((f) => { if (this[f] != fu[f]) equal = false; });\n  return equal;\n};\n\n/**\n * Returns a copy of this Fuzzyurl, with the given changes (if any).\n * Does not mutate this Fuzzyurl object.\n *\n * @param {object|null} params Fuzzyurl keys and values to override.\n * @returns {Fuzzyurl} Fuzzyurl based on this, with given overrides.\n */\nmodule.exports.prototype.with = function (params) {\n  let ps = params || {};\n  let f = new Fuzzyurl();\n  fields.forEach((field) => {\n    if (ps.hasOwnProperty(field)) f[field] = ps[field];\n    else f[field] = this[field];\n  });\n  return f;\n};\n\n/**\n * Returns a URL mask from the given string or object.  Unspecified URL\n * parts default to a wildcard, `*`.\n *\n * @param {object|string|null} params Object or string to create mask from.\n * @returns {Fuzzyurl} Fuzzyurl mask object.\n */\nmodule.exports.mask = function (params) {\n  var fu;\n  if (typeof params == \"string\") {\n    fu = Fuzzyurl.fromString(params, {default: \"*\"});\n  }\n  else if (!params) {\n    fu = {};\n  }\n  else if (typeof params == \"object\") {\n    fu = params;\n  }\n  else {\n    throw new Error(\"params must be string, object, or null\");\n  }\n\n  var m = new Fuzzyurl(maskDefaults);\n  Object.keys(fu).forEach((k) => {\n    if (fu[k]) m[k] = fu[k];\n  });\n  return m;\n};\nconst maskDefaults = {\n  protocol: \"*\", username: \"*\", password: \"*\", hostname: \"*\",\n  port: \"*\", path: \"*\", query: \"*\", fragment: \"*\"\n};\n\n\n/**\n * Returns a string representation of the given Fuzzyurl object.\n *\n * @param {Fuzzyurl} fuzzyurl Fuzzyurl object to convert to string format.\n * @returns {string} String representation of `fuzzyurl`.\n */\nmodule.exports.toString = function (fuzzyurl) {\n  return Strings.toString(fuzzyurl);\n};\n\n/**\n * Returns a string representation of this Fuzzyurl object.\n *\n * @returns {string} String representation of `fuzzyurl`.\n */\nmodule.exports.prototype.toString = function () { return Strings.toString(this); };\n\n\n/**\n * From a given string URL or URL mask, returns a Fuzzyurl object that\n * represents it.  Option `default` specifies the Fuzzyurl's default field\n * value; pass `default: \"*\"` to create a URL mask.\n *\n * @param {string} str The URL or URL mask to convert to a Fuzzyurl object.\n * @returns {Fuzzyurl} Fuzzyurl representation of `str`.\n */\nmodule.exports.fromString = function (string) {\n  return new Fuzzyurl(Strings.fromString(string));\n};\n\n/**\n * If `mask` (which may contain * wildcards) matches `url` (which may not),\n * returns an integer representing how closely they match (higher is closer).\n * If `mask` does not match `url`, returns null.\n *\n * `mask` and `url` may each be a string or Fuzzyurl object.\n *\n * @param {Fuzzyurl|string} mask  Fuzzyurl mask to match with\n * @param {Fuzzyurl|string} url   Fuzzyurl URL to match\n * @returns {integer|null} total match score, or null if no match\n *\n */\nmodule.exports.match = function (mask, url) {\n  var m = (typeof mask === \"string\") ? Strings.fromString(mask, {default: \"*\"}) : mask;\n  var u = (typeof url === \"string\") ? Strings.fromString(url) : url;\n  return Match.match(m, u);\n};\n\n/**\n * If `mask` (which may contain * wildcards) matches `url` (which may not),\n * returns true; otherwise returns false.\n *\n * `mask` and `url` may each be a string or Fuzzyurl object.\n *\n * @param {Fuzzyurl|string} mask  Fuzzyurl mask to match with\n * @param {Fuzzyurl|string} url   Fuzzyurl URL to match\n * @returns {boolean} true if mask matches url, false otherwise\n */\nmodule.exports.matches = function (mask, url) {\n  var m = (typeof mask === \"string\") ? Strings.fromString(mask, {default: \"*\"}) : mask;\n  var u = (typeof url === \"string\") ? Strings.fromString(url) : url;\n  return Match.matches(m, u);\n};\n\n/**\n * Returns a Fuzzyurl-like object containing values representing how well\n * different parts of `mask` and `url` match.  Values are integers for\n * matches or null for no match; higher integers indicate a better match.\n *\n * `mask` and `url` may each be a string or Fuzzyurl object.\n *\n * @param {Fuzzyurl|string} mask  Fuzzyurl mask to match with\n * @param {Fuzzyurl|string} url   Fuzzyurl URL to match\n * @returns {Fuzzyurl} Fuzzyurl-like object containing match scores\n */\nmodule.exports.matchScores = function (mask, url) {\n  var m = (typeof mask === \"string\") ? Strings.fromString(mask, {default: \"*\"}) : mask;\n  var u = (typeof url === \"string\") ? Strings.fromString(url) : url;\n  return Match.matchScores(m, u);\n};\n\n/**\n * If `mask` (which may contain * wildcards) matches `url` (which may not),\n * returns 1 if `mask` and `url` match perfectly, 0 if `mask` and `url`\n * are a wildcard match, or null otherwise.\n *\n * Wildcard language:\n *\n *     *              matches anything\n *     foo/*          matches \"foo/\" and \"foo/bar/baz\" but not \"foo\"\n *     foo/**         matches \"foo/\" and \"foo/bar/baz\" and \"foo\"\n *     *.example.com  matches \"api.v1.example.com\" but not \"example.com\"\n *     **.example.com matches \"api.v1.example.com\" and \"example.com\"\n *\n * Any other form is treated as a literal match.\n *\n * @param {string} mask  String mask to match with (may contain wildcards).\n * @param {string} value String value to match.\n * @returns {integer|null} 1 for perfect match, 0 for wildcard match, null otherwise.\n */\nmodule.exports.fuzzyMatch = function (mask, value) {\n  return Match.fuzzyMatch(mask, value);\n}\n\n/**\n * From a list of Fuzzyurl `masks`, returns the index of the one which best\n * matches `url`.  Returns null if none of `masks` match.\n *\n * `url` and each element of `masks` may be either a Fuzzyurl object or\n * a string representation.\n *\n * @param {array} masks  Array of Fuzzyurl URL masks to match with.\n * @param {Fuzzyurl} url Fuzzyurl URL to match.\n * @returns {integer|null} Index of best matching mask, or null if none match.\n */\nmodule.exports.bestMatchIndex = function (masks, url) {\n  var ms = masks.map((m) => (typeof m === \"string\") ? Strings.fromString(m, {default: \"*\"}) : m );\n  var u = (typeof url === \"string\") ? Strings.fromString(url) : url;\n  return Match.bestMatchIndex(ms, u);\n};\n\n/**\n * From a list of Fuzzyurl `masks`, returns the one which best\n * matches `url`.  Returns null if none of `masks` match.\n *\n * `url` and each element of `masks` may be either a Fuzzyurl object or\n * a string representation.\n *\n * @param {array} masks  Array of Fuzzyurl URL masks to match with.\n * @param {Fuzzyurl} url Fuzzyurl URL to match.\n * @returns {integer|null} Index of best matching mask, or null if none match.\n */\nmodule.exports.bestMatch = function (masks, url) {\n  let index = Fuzzyurl.bestMatchIndex(masks, url);\n  return index && masks[index];\n};\n\n",
    "/** @module fuzzyurl/match */\n\n'use strict';\n\nlet Protocols = require('./protocols');\n\n/**\n * If `mask` (which may contain * wildcards) matches `url` (which may not),\n * returns an integer representing how closely they match (higher is closer).\n * If `mask` does not match `url`, returns null.\n *\n * @param {Fuzzyurl} mask  Fuzzyurl mask to match with\n * @param {Fuzzyurl} url   Fuzzyurl URL to match\n * @returns {integer|null} total match score, or null if no match\n *\n */\nfunction match(mask, url) {\n  let scores = matchScores(mask, url);\n  let scoreValues = Object.keys(scores).map((k) => scores[k]);\n  if (scoreValues.indexOf(null) >= 0) return null;\n  return scoreValues.reduce((x, y) => x + y);\n}\n\n/**\n * If `mask` (which may contain * wildcards) matches `url` (which may not),\n * returns true; otherwise returns false.\n *\n * @param {Fuzzyurl} mask  Fuzzyurl mask to match with\n * @param {Fuzzyurl} url   Fuzzyurl URL to match\n * @returns {boolean} true if mask matches url, false otherwise\n */\nfunction matches(mask, url) {\n  return (match(mask, url) !== null);\n}\n\n/**\n * Returns a Fuzzyurl-like object containing values representing how well\n * different parts of `mask` and `url` match.  Values are integers for\n * matches or null for no match; higher integers indicate a better match.\n *\n * @param {Fuzzyurl} mask  Fuzzyurl mask to match with\n * @param {Fuzzyurl} url   Fuzzyurl URL to match\n * @returns {Fuzzyurl} Fuzzyurl-like object containing match scores\n */\nfunction matchScores(mask, url) {\n  if (\"object\" !== typeof mask) throw new Error('mask must be a Fuzzyurl object');\n  if (\"object\" !== typeof url) throw new Error('url must be a Fuzzyurl object');\n\n  // infer protocol from port, and vice versa\n  let urlProtocol = url.protocol || Protocols.getProtocol(url.port);\n  let urlPort = url.port || Protocols.getPort(url.protocol);\n\n  return {\n    protocol: fuzzyMatch(mask.protocol, urlProtocol),\n    username: fuzzyMatch(mask.username, url.username),\n    password: fuzzyMatch(mask.password, url.password),\n    hostname: fuzzyMatch(mask.hostname, url.hostname),\n    port: fuzzyMatch(mask.port, urlPort),\n    path: fuzzyMatch(mask.path, url.path),\n    query: fuzzyMatch(mask.query, url.query),\n    fragment: fuzzyMatch(mask.fragment, url.fragment)\n  };\n}\n\n/**\n * If `mask` (which may contain * wildcards) matches `url` (which may not),\n * returns 1 if `mask` and `url` match perfectly, 0 if `mask` and `url`\n * are a wildcard match, or null otherwise.\n *\n * Wildcard language:\n *\n *     *              matches anything\n *     foo/*          matches \"foo/\" and \"foo/bar/baz\" but not \"foo\"\n *     foo/**         matches \"foo/\" and \"foo/bar/baz\" and \"foo\"\n *     *.example.com  matches \"api.v1.example.com\" but not \"example.com\"\n *     **.example.com matches \"api.v1.example.com\" and \"example.com\"\n *\n * Any other form is treated as a literal match.\n *\n * @param {string} mask  String mask to match with (may contain wildcards).\n * @param {string} value String value to match.\n * @returns {integer|null} 1 for perfect match, 0 for wildcard match, null otherwise.\n */\nfunction fuzzyMatch(mask, value) {\n  if (mask === \"*\") return 0;\n  if (mask == value) return 1;\n  if (!mask || !value) return null;\n\n  if (mask.indexOf(\"**.\") == 0) {\n    let maskValue = mask.slice(3);\n    if (value.endsWith('.' + maskValue)) return 0;\n    if (maskValue === value) return 0;\n    return null;\n  }\n  if (mask.indexOf(\"*\") == 0) {\n    if (value.endsWith(mask.slice(1))) return 0;\n    return null;\n  }\n\n  // trailing wildcards are implemented more easily in reverse\n  let revMask = strReverse(mask);\n  let revValue = strReverse(value);\n\n  if (revMask.indexOf(\"**/\") == 0) {\n    let revMaskValue = revMask.slice(3);\n    if (revValue.endsWith('/' + revMaskValue)) return 0;\n    if (revValue === revMaskValue) return 0;\n    return null;\n  }\n  if (revMask.indexOf(\"*\") == 0) {\n    if (revValue.endsWith(revMask.slice(1))) return 0;\n    return null;\n  }\n\n  return null;\n}\n\n// this implementation is from the internet and it is fast\nfunction strReverse(str) {\n  var rev = '';\n  for (var i = str.length - 1; i >= 0; i--) rev += str[i];\n  return rev;\n}\n\n\n/**\n * From a list of Fuzzyurl `masks`, returns the index of the one which best\n * matches `url`.  Returns null if none of `masks` match.\n *\n * @param {array} masks  Array of Fuzzyurl URL masks to match with.\n * @param {Fuzzyurl} url Fuzzyurl URL to match.\n * @returns {integer|null} Index of best matching mask, or null if none match.\n */\nfunction bestMatchIndex(masks, url) {\n  if (\"object\" !== typeof url) throw new Error(`url must be a Fuzzyurl object`);\n  var bestIndex = null;\n  var bestScore = -1;\n  for (let i in masks) {\n    let m = masks[i];\n    if (\"object\" !== typeof m) throw new Error(`Got a non-Fuzzyurl mask: ${m}`);\n    let score = match(m, url);\n    if (score !== null && score > bestScore) {\n      bestScore = score;\n      bestIndex = parseInt(i);\n    }\n  }\n  return bestIndex;\n}\n\nmodule.exports = { match, matches, matchScores, fuzzyMatch, bestMatchIndex };\n\n",
    "/** @module fuzzyurl/protocols */\n\n'use strict';\n\nconst portsByProtocol = {\n  ssh: \"22\",\n  http: \"80\",\n  https: \"443\"\n};\n\nconst protocolsByPort = {\n  22: \"ssh\",\n  80: \"http\",\n  443: \"https\"\n};\n\n/**\n * Given a protocol, returns the (string-formatted) port number, or null\n * if not found.\n *\n * @param {string|null} protocol\n * @returns {string|null} port\n */\nfunction getPort(protocol) {\n  if (!protocol) return null;\n  let baseProtocol = protocol.split(\"+\").pop();\n  return portsByProtocol[baseProtocol];\n}\n\n/**\n * Given a port number (string or integer), returns the protocol string,\n * or null if not found.\n *\n * @param {string|integer} port\n * @returns {string|null} protocol\n */\nfunction getProtocol(port) {\n  if (!port) return null;\n  return protocolsByPort[port.toString()];\n}\n\nmodule.exports = { getPort, getProtocol };\n\n",
    "/** @module fuzzyurl/strings */\n\n'use strict';\n\n// This regex is a lot more readable in the Elixir and Ruby versions.\nconst regex = new RegExp(\n  '^' +\n  '(?:(\\\\*|[a-zA-Z][A-Za-z+.-]+)://)?' +        // m[1] is protocol\n  '(?:(\\\\*|[a-zA-Z0-9%_.!~*\\'();&=+$,-]+)' +    // m[2] is username\n  '(?::(\\\\*|[a-zA-Z0-9%_.!~*\\'();&=+$,-]*))?' + // m[3] is password\n  '@)?' +\n  '([a-zA-Z0-9\\\\.\\\\*\\\\-]+?)?' +                 // m[4] is hostname\n  '(?::(\\\\*|\\\\d+))?' +                          // m[5] is port\n  '(/[^\\\\?\\\\#]*)?' +                            // m[6] is path\n  '(?:\\\\?([^\\\\#]*))?' +                         // m[7] is query\n  '(?:\\\\#(.*))?' +                              // m[8] is fragment\n  '$'\n);\n\n/**\n * From a given string URL or URL mask, returns a generic object that\n * represents it.  Option `default` specifies the Fuzzyurl's default field\n * value; pass `default: \"*\"` to create a URL mask.\n *\n * @param {string} str The URL or URL mask to convert to a Fuzzyurl object.\n * @returns {object} Object representation of `str`.\n */\nfunction fromString(str, options) {\n  let opts = options || {};\n  let defval = opts.default;\n\n  if (typeof str !== \"string\") return null;\n  let m = regex.exec(str, regex);\n  if (!m) return null;\n  return {\n    protocol: m[1] || defval,\n    username: m[2] || defval,\n    password: m[3] || defval,\n    hostname: m[4] || defval,\n    port:     m[5] || defval,\n    path:     m[6] || defval,\n    query:    m[7] || defval,\n    fragment: m[8] || defval\n  };\n}\n\n/**\n * Returns a string representation of the given Fuzzyurl object.\n *\n * @param {Fuzzyurl} fuzzyurl Fuzzyurl object to convert to string format.\n * @returns {string} String representation of `fuzzyurl`.\n */\nfunction toString(fuzzyurl) {\n  var out = '', f = fuzzyurl;\n  if (f.protocol) out += `${f.protocol}://`;\n  if (f.username) out += f.username;\n  if (f.password) out += `:${f.password}`;\n  if (f.username) out += `@`;\n  if (f.hostname) out += f.hostname;\n  if (f.port)     out += `:${f.port}`;\n  if (f.path)     out += f.path;\n  if (f.query)    out += `?${f.query}`;\n  if (f.fragment) out += `#${f.fragment}`;\n  return out;\n}\n\nmodule.exports = { fromString, toString };\n\n"
  ]
}